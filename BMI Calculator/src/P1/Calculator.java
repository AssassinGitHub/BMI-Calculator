package P1;

import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.*;
import javax.imageio.ImageIO;
import javax.swing.*;

public class Calculator extends javax.swing.JFrame {

    //Declaration of Global Identifiers, Decimal Format Objects and Icons
    Methods obj = new Methods();
    FileOperation obj1 = new FileOperation();
    int language=0, output=0, unit=0;
    public DecimalFormat df=new DecimalFormat("#.00000");
    public DecimalFormat df1=new DecimalFormat("#.0");
    public DecimalFormat df2=new DecimalFormat("#.000");
    ImageIcon imageIcon;
    ArrayList<SimplePerson> sP = new ArrayList<SimplePerson>();
    ArrayList<ComplexPerson> cP = new ArrayList<ComplexPerson>();

    /**
     * Creates new form main
     */
    public Calculator() {
        
        //Creates both the files required for file manipulation as well as
        //the resulting Array Lists of Objects.
        
        obj1.createArrayList1();
        obj1.createArrayList2();
        
        sP=obj1.readFile1(sP);
        cP=obj1.readFile2(cP);
        
        /**
         * sP.clear();
         * cP.clear();
         */
        
        
        //Introduction Message shown before any components are loaded.
        JOptionPane.showMessageDialog(null, "Welcome to the BMI Calculator."
                                            + "\n\nHere, you can calculate different values, save and load data.", "BMI Calculator", 1);
       //Loads all Java Swing JFrame Components.
        initComponents();
        
        //Creates an empty buffered image.
        BufferedImage img = null;
        
        //Attempts to read the file. Throws an exception if file is corrupt or un-readable.
        try {
            img = ImageIO.read(new File("Media/BMIScale.jpg"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        //Creates an image based on the size of the labes in which said image will be displayed.
        Image dimg = img.getScaledInstance(jimage.getWidth(), jimage.getHeight(),
        Image.SCALE_SMOOTH);
        
        //Creates the icon based on the resized image.
        imageIcon = new ImageIcon(dimg);
        
        //Sets the label to the previously defined icon.
        jimage.setIcon(imageIcon);
        
        //Calls upon the method to read the operative system's time and date,
        //and sets it to the required label.
        dateAndTime.setText(obj.setTimeAndDate());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFsettings = new javax.swing.JFrame();
        jBTReturn = new javax.swing.JButton();
        jBTHelp = new javax.swing.JButton();
        jBTReset = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jRBeng = new javax.swing.JRadioButton();
        jRBesp = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jRBdetail = new javax.swing.JRadioButton();
        jRBsimple = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jRBmetric = new javax.swing.JRadioButton();
        jRBimperial = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        bGLanguage = new javax.swing.ButtonGroup();
        bGOutput = new javax.swing.ButtonGroup();
        bGUnit = new javax.swing.ButtonGroup();
        jFsimple = new javax.swing.JFrame();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jTFWeight1 = new javax.swing.JTextField();
        jTFHeight1 = new javax.swing.JTextField();
        jTFBMI1 = new javax.swing.JTextField();
        jBTC1 = new javax.swing.JButton();
        jRBG1 = new javax.swing.JRadioButton();
        jRBKG1 = new javax.swing.JRadioButton();
        jRBCM1 = new javax.swing.JRadioButton();
        jRBM1 = new javax.swing.JRadioButton();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jTFstatus1 = new javax.swing.JTextField();
        jBTsimpleSave = new javax.swing.JButton();
        jBTsimpleLoad = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jTFBMI2 = new javax.swing.JTextField();
        jSeparator9 = new javax.swing.JSeparator();
        jRBM2 = new javax.swing.JRadioButton();
        jRBCM2 = new javax.swing.JRadioButton();
        jTFHeight2 = new javax.swing.JTextField();
        jSeparator10 = new javax.swing.JSeparator();
        jTFWeight2 = new javax.swing.JTextField();
        jBTC2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jTFBMI3 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jSeparator11 = new javax.swing.JSeparator();
        jTFWeight3 = new javax.swing.JTextField();
        jRBKG2 = new javax.swing.JRadioButton();
        jRBG2 = new javax.swing.JRadioButton();
        jSeparator12 = new javax.swing.JSeparator();
        jBTC3 = new javax.swing.JButton();
        jTFHeight3 = new javax.swing.JTextField();
        jBTReturn1 = new javax.swing.JButton();
        jimage = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jFcomplex = new javax.swing.JFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTAResults = new javax.swing.JTextArea();
        jBTReturn2 = new javax.swing.JButton();
        jBTcomplexSave = new javax.swing.JButton();
        jBTcomplexLoad = new javax.swing.JButton();
        jTFcomplexW = new javax.swing.JTextField();
        jSeparator7 = new javax.swing.JSeparator();
        jTFcomplexH = new javax.swing.JTextField();
        jSeparator8 = new javax.swing.JSeparator();
        jRBMale = new javax.swing.JRadioButton();
        jRBFemale = new javax.swing.JRadioButton();
        jBTC4 = new javax.swing.JButton();
        jLabelAge = new javax.swing.JLabel();
        jTFAge = new javax.swing.JTextField();
        jRBKG3 = new javax.swing.JRadioButton();
        jRBG3 = new javax.swing.JRadioButton();
        jRBM3 = new javax.swing.JRadioButton();
        jRBCM3 = new javax.swing.JRadioButton();
        bGWeight1 = new javax.swing.ButtonGroup();
        bGHeight1 = new javax.swing.ButtonGroup();
        bGHeight2 = new javax.swing.ButtonGroup();
        bGWeight2 = new javax.swing.ButtonGroup();
        bGGender = new javax.swing.ButtonGroup();
        bGWeight3 = new javax.swing.ButtonGroup();
        bGHeight3 = new javax.swing.ButtonGroup();
        jBTSettings = new javax.swing.JButton();
        jBTExit = new javax.swing.JButton();
        jBTSimple = new javax.swing.JButton();
        jBTComplex = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        dateAndTime = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();

        jFsettings.setTitle("Settings");
        jFsettings.setBounds(new java.awt.Rectangle(450, 200, 400, 400));
        jFsettings.setMinimumSize(new java.awt.Dimension(400, 400));
        jFsettings.setResizable(false);
        jFsettings.setSize(new java.awt.Dimension(400, 400));

        jBTReturn.setBackground(new java.awt.Color(255, 102, 102));
        jBTReturn.setText("Return");
        jBTReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTReturnActionPerformed(evt);
            }
        });

        jBTHelp.setBackground(new java.awt.Color(204, 255, 255));
        jBTHelp.setText("?");
        jBTHelp.setToolTipText("Help");
        jBTHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTHelpActionPerformed(evt);
            }
        });

        jBTReset.setBackground(new java.awt.Color(204, 0, 0));
        jBTReset.setText("Reset");
        jBTReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTResetActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(153, 204, 255));
        jLabel2.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Accessibility Settings");
        jLabel2.setBorder(new javax.swing.border.MatteBorder(null));
        jLabel2.setOpaque(true);

        jLabel3.setBackground(new java.awt.Color(102, 204, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Language Settings");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel3.setOpaque(true);

        bGLanguage.add(jRBeng);
        jRBeng.setSelected(true);
        jRBeng.setText("English");
        jRBeng.setToolTipText("Set Language to English");
        jRBeng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBengActionPerformed(evt);
            }
        });

        bGLanguage.add(jRBesp);
        jRBesp.setText("Español");
        jRBesp.setToolTipText("Cambiar Lenguaje a Español");
        jRBesp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBespActionPerformed(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(255, 204, 51));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("<html>&nbsp;&nbsp;&nbsp;Output Settings<br>&nbsp;(Simple BMI Calc.)&nbsp;<html>");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel4.setOpaque(true);

        bGOutput.add(jRBdetail);
        jRBdetail.setSelected(true);
        jRBdetail.setText("Detailed");
        jRBdetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBdetailActionPerformed(evt);
            }
        });

        bGOutput.add(jRBsimple);
        jRBsimple.setText("Simple");
        jRBsimple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBsimpleActionPerformed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(153, 153, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Unit Settings");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel5.setOpaque(true);

        bGUnit.add(jRBmetric);
        jRBmetric.setSelected(true);
        jRBmetric.setText("Metric");
        jRBmetric.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBmetricActionPerformed(evt);
            }
        });

        bGUnit.add(jRBimperial);
        jRBimperial.setText("Imperial");
        jRBimperial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBimperialActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFsettingsLayout = new javax.swing.GroupLayout(jFsettings.getContentPane());
        jFsettings.getContentPane().setLayout(jFsettingsLayout);
        jFsettingsLayout.setHorizontalGroup(
            jFsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFsettingsLayout.createSequentialGroup()
                .addComponent(jBTReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBTHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(91, 91, 91)
                .addComponent(jBTReset, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jSeparator1)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jFsettingsLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jFsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFsettingsLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jRBmetric)
                        .addGap(18, 18, 18)
                        .addComponent(jRBimperial))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFsettingsLayout.createSequentialGroup()
                        .addComponent(jRBdetail)
                        .addGap(18, 18, 18)
                        .addComponent(jRBsimple)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jFsettingsLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jFsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRBesp)
                            .addComponent(jRBeng)))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jFsettingsLayout.setVerticalGroup(
            jFsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFsettingsLayout.createSequentialGroup()
                .addGroup(jFsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBTHelp, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jFsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBTReturn)
                        .addComponent(jBTReset)))
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(jFsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jFsettingsLayout.createSequentialGroup()
                        .addComponent(jRBeng)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jRBesp)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(jFsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jFsettingsLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jFsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRBdetail)
                            .addComponent(jRBsimple))))
                .addGap(11, 11, 11)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jFsettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRBmetric)
                    .addComponent(jRBimperial))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        jFsimple.setTitle("Simple Calculation");
        jFsimple.setLocation(new java.awt.Point(300, 200));
        jFsimple.setResizable(false);
        jFsimple.setSize(new java.awt.Dimension(600, 400));

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jTFWeight1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTFWeight1KeyTyped(evt);
            }
        });

        jTFHeight1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTFHeight1KeyTyped(evt);
            }
        });

        jTFBMI1.setEditable(false);
        jTFBMI1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jBTC1.setText("Calculate");
        jBTC1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTC1ActionPerformed(evt);
            }
        });

        bGWeight1.add(jRBG1);
        jRBG1.setText("Grams");

        bGWeight1.add(jRBKG1);
        jRBKG1.setSelected(true);
        jRBKG1.setText("Kilograms");

        bGHeight1.add(jRBCM1);
        jRBCM1.setText("Centimeters");

        bGHeight1.add(jRBM1);
        jRBM1.setSelected(true);
        jRBM1.setText("Meters");

        jTFstatus1.setEditable(false);
        jTFstatus1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jBTsimpleSave.setText("Save");
        jBTsimpleSave.setEnabled(false);
        jBTsimpleSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTsimpleSaveActionPerformed(evt);
            }
        });

        jBTsimpleLoad.setText("Load");
        jBTsimpleLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTsimpleLoadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator4)
            .addComponent(jSeparator5)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTFstatus1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jBTC1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                                .addComponent(jTFBMI1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTFHeight1, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                                    .addComponent(jTFWeight1))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRBG1)
                                    .addComponent(jRBKG1)
                                    .addComponent(jRBCM1)
                                    .addComponent(jRBM1))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jBTsimpleSave, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBTsimpleLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jTFWeight1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jRBKG1)
                        .addGap(18, 18, 18)
                        .addComponent(jRBG1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jRBM1)
                        .addGap(18, 18, 18)
                        .addComponent(jRBCM1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jTFHeight1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBTC1)
                    .addComponent(jTFBMI1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTFstatus1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBTsimpleSave)
                    .addComponent(jBTsimpleLoad))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("BMI", jPanel1);

        bGHeight2.add(jRBM2);
        jRBM2.setSelected(true);
        jRBM2.setText("Meters");

        bGHeight2.add(jRBCM2);
        jRBCM2.setText("Centimeters");

        jTFWeight2.setEditable(false);
        jTFWeight2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jBTC2.setText("Calculate");
        jBTC2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTC2ActionPerformed(evt);
            }
        });

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("BMI");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator9)
            .addComponent(jSeparator10)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jBTC2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addComponent(jTFWeight2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jTFBMI2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jTFHeight2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRBCM2)
                                    .addComponent(jRBM2))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFBMI2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jRBM2)
                        .addGap(18, 18, 18)
                        .addComponent(jRBCM2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jTFHeight2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBTC2)
                    .addComponent(jTFWeight2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(98, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Weight", jPanel2);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("BMI");

        bGWeight2.add(jRBKG2);
        jRBKG2.setSelected(true);
        jRBKG2.setText("Kilograms");

        bGWeight2.add(jRBG2);
        jRBG2.setText("Grams");

        jBTC3.setText("Calculate");
        jBTC3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTC3ActionPerformed(evt);
            }
        });

        jTFHeight3.setEditable(false);
        jTFHeight3.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator11)
            .addComponent(jSeparator12)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jBTC3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addComponent(jTFHeight3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jTFBMI3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jTFWeight3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRBG2)
                                    .addComponent(jRBKG2))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFBMI3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator11, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jRBKG2)
                        .addGap(18, 18, 18)
                        .addComponent(jRBG2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jTFWeight3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator12, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBTC3)
                    .addComponent(jTFHeight3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(98, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Height", jPanel3);

        jBTReturn1.setBackground(new java.awt.Color(255, 102, 102));
        jBTReturn1.setText("Return");
        jBTReturn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTReturn1ActionPerformed(evt);
            }
        });

        jimage.setMaximumSize(new java.awt.Dimension(300, 300));
        jimage.setMinimumSize(new java.awt.Dimension(300, 300));
        jimage.setPreferredSize(new java.awt.Dimension(300, 300));
        jimage.setSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout jFsimpleLayout = new javax.swing.GroupLayout(jFsimple.getContentPane());
        jFsimple.getContentPane().setLayout(jFsimpleLayout);
        jFsimpleLayout.setHorizontalGroup(
            jFsimpleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFsimpleLayout.createSequentialGroup()
                .addGroup(jFsimpleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFsimpleLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jBTReturn1))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jFsimpleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jimage, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                    .addGroup(jFsimpleLayout.createSequentialGroup()
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jFsimpleLayout.setVerticalGroup(
            jFsimpleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFsimpleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFsimpleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFsimpleLayout.createSequentialGroup()
                        .addComponent(jimage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jFsimpleLayout.createSequentialGroup()
                        .addComponent(jBTReturn1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        jFcomplex.setTitle("Complex Calculation");
        jFcomplex.setLocation(new java.awt.Point(300, 250));
        jFcomplex.setMinimumSize(new java.awt.Dimension(655, 306));
        jFcomplex.setPreferredSize(new java.awt.Dimension(665, 320));
        jFcomplex.setResizable(false);
        jFcomplex.setSize(new java.awt.Dimension(655, 320));

        jTAResults.setEditable(false);
        jTAResults.setBackground(new java.awt.Color(204, 204, 204));
        jTAResults.setColumns(20);
        jTAResults.setLineWrap(true);
        jTAResults.setRows(5);
        jTAResults.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTAResults);

        jBTReturn2.setBackground(new java.awt.Color(255, 102, 102));
        jBTReturn2.setText("Return");
        jBTReturn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTReturn2ActionPerformed(evt);
            }
        });

        jBTcomplexSave.setText("Save");
        jBTcomplexSave.setEnabled(false);
        jBTcomplexSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTcomplexSaveActionPerformed(evt);
            }
        });

        jBTcomplexLoad.setText("Load");
        jBTcomplexLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTcomplexLoadActionPerformed(evt);
            }
        });

        jTFcomplexW.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTFcomplexWKeyTyped(evt);
            }
        });

        jTFcomplexH.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTFcomplexHKeyTyped(evt);
            }
        });

        bGGender.add(jRBMale);
        jRBMale.setText("Male");

        bGGender.add(jRBFemale);
        jRBFemale.setText("Female");

        jBTC4.setText("Calculate");
        jBTC4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTC4ActionPerformed(evt);
            }
        });

        jLabelAge.setBackground(new java.awt.Color(204, 255, 204));
        jLabelAge.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelAge.setText("Age:");
        jLabelAge.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabelAge.setOpaque(true);

        jTFAge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTFAgeKeyTyped(evt);
            }
        });

        bGWeight3.add(jRBKG3);
        jRBKG3.setSelected(true);
        jRBKG3.setText("Kilograms");

        bGWeight3.add(jRBG3);
        jRBG3.setText("Grams");

        bGHeight3.add(jRBM3);
        jRBM3.setSelected(true);
        jRBM3.setText("Meters");

        bGHeight3.add(jRBCM3);
        jRBCM3.setText("Centimeters");

        javax.swing.GroupLayout jFcomplexLayout = new javax.swing.GroupLayout(jFcomplex.getContentPane());
        jFcomplex.getContentPane().setLayout(jFcomplexLayout);
        jFcomplexLayout.setHorizontalGroup(
            jFcomplexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFcomplexLayout.createSequentialGroup()
                .addGroup(jFcomplexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator7)
                    .addComponent(jSeparator8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jFcomplexLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jFcomplexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFcomplexLayout.createSequentialGroup()
                                .addGroup(jFcomplexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jFcomplexLayout.createSequentialGroup()
                                        .addGroup(jFcomplexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jBTReturn2)
                                            .addComponent(jRBMale)
                                            .addComponent(jTFcomplexH, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTFcomplexW, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(jFcomplexLayout.createSequentialGroup()
                                        .addComponent(jRBFemale)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(jFcomplexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRBKG3)
                                    .addComponent(jRBG3)
                                    .addComponent(jRBM3)
                                    .addComponent(jRBCM3)
                                    .addGroup(jFcomplexLayout.createSequentialGroup()
                                        .addGap(26, 26, 26)
                                        .addComponent(jLabelAge, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)
                                        .addComponent(jTFAge, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(13, 13, 13))
                            .addComponent(jBTC4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jFcomplexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFcomplexLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFcomplexLayout.createSequentialGroup()
                        .addComponent(jBTcomplexSave, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBTcomplexLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61))))
        );
        jFcomplexLayout.setVerticalGroup(
            jFcomplexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFcomplexLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFcomplexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFcomplexLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jFcomplexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBTcomplexSave)
                            .addComponent(jBTcomplexLoad)))
                    .addGroup(jFcomplexLayout.createSequentialGroup()
                        .addGroup(jFcomplexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jFcomplexLayout.createSequentialGroup()
                                .addComponent(jBTReturn2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTFcomplexW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jFcomplexLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jRBKG3)
                                .addGap(9, 9, 9)
                                .addComponent(jRBG3)))
                        .addGap(12, 12, 12)
                        .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jFcomplexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jFcomplexLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jRBM3)
                                .addGap(9, 9, 9)
                                .addComponent(jRBCM3))
                            .addGroup(jFcomplexLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jTFcomplexH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(17, 17, 17)
                        .addGroup(jFcomplexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jFcomplexLayout.createSequentialGroup()
                                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRBMale)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRBFemale))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFcomplexLayout.createSequentialGroup()
                                .addGroup(jFcomplexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelAge)
                                    .addComponent(jTFAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(14, 14, 14)))
                        .addComponent(jBTC4)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Main Menu");
        setBounds(new java.awt.Rectangle(450, 200, 0, 0));
        setResizable(false);
        setSize(new java.awt.Dimension(400, 400));

        jBTSettings.setBackground(new java.awt.Color(153, 204, 255));
        jBTSettings.setText("Accessibility Settings");
        jBTSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTSettingsActionPerformed(evt);
            }
        });

        jBTExit.setBackground(new java.awt.Color(255, 102, 102));
        jBTExit.setText("Exit");
        jBTExit.setToolTipText("Close Application");
        jBTExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTExitActionPerformed(evt);
            }
        });

        jBTSimple.setBackground(new java.awt.Color(204, 255, 204));
        jBTSimple.setText("Simple BMI Calculation");
        jBTSimple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTSimpleActionPerformed(evt);
            }
        });

        jBTComplex.setBackground(new java.awt.Color(255, 204, 204));
        jBTComplex.setText("Complex BMI Calculation");
        jBTComplex.setPreferredSize(new java.awt.Dimension(187, 29));
        jBTComplex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTComplexActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(153, 153, 153));
        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("BMI Calculator");
        jLabel1.setBorder(new javax.swing.border.MatteBorder(null));
        jLabel1.setOpaque(true);

        dateAndTime.setText("dd/MM/yy - HH:mm:ss");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBTExit, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dateAndTime))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jBTSimple, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBTComplex, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(107, 107, 107)
                                .addComponent(jBTSettings, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 2, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jSeparator6)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBTExit)
                    .addComponent(dateAndTime))
                .addGap(37, 37, 37)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBTComplex, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBTSimple, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jBTSettings, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Event Method when user clicks on the Settings Button.
    private void jBTSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTSettingsActionPerformed
        this.dispose();
        jFsettings.setVisible(true);
    }//GEN-LAST:event_jBTSettingsActionPerformed
    //Event Method when user clicks on the Simple BMI Button.
    private void jBTSimpleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTSimpleActionPerformed
        this.dispose();
        jFsimple.setVisible(true);
    }//GEN-LAST:event_jBTSimpleActionPerformed
    //Event Method when user clicks on the Complex BMI Button.
    private void jBTComplexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTComplexActionPerformed
        this.dispose();
        jFcomplex.setVisible(true);
    }//GEN-LAST:event_jBTComplexActionPerformed
    //Event Method when user clicks on the Exit Button.
    private void jBTExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTExitActionPerformed
        this.dispose();
        if(language==0) {
            int c=JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?\nUnsaved changes will be lost.", "Confirmation", 0, 2);
            if (c==0) {
                JOptionPane.showMessageDialog(null, "Application Closed.", "Notice", 1);
                System.exit(0);
            } else {
                JOptionPane.showMessageDialog(null, "Returning to Main Menu…", "Notice", 1);
                dateAndTime.setText(obj.setTimeAndDate());
                this.setVisible(true);
            }
        } else if(language==1) {
            int c=JOptionPane.showConfirmDialog(null, "¿Está usted seguro de que quiere salir?\nLos cambios no guardados se perderán.", "Confirmación", 0, 2);
            if (c==0) {
                JOptionPane.showMessageDialog(null, "Aplicación Cerrada.", "Aviso", 1);
                System.exit(0);
            } else {
                JOptionPane.showMessageDialog(null, "Regresando al Menú Principal…", "Aviso", 1);
                dateAndTime.setText(obj.setTimeAndDate());
                this.setVisible(true);
            }
        }
    }//GEN-LAST:event_jBTExitActionPerformed
    //Event Method when user clicks on the Return Button.
    private void jBTReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTReturnActionPerformed
        jFsettings.dispose();
        dateAndTime.setText(obj.setTimeAndDate());
        this.setVisible(true);
    }//GEN-LAST:event_jBTReturnActionPerformed

    private void jRBengActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBengActionPerformed
        if(jRBeng.isSelected()) {
            language=0;
            setEnglish();
        } else if(jRBesp.isSelected()) {
            language=1;
            setSpanish();
        }
        setUnits();
    }//GEN-LAST:event_jRBengActionPerformed

    private void jRBespActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBespActionPerformed
        if(jRBeng.isSelected()) {
            language=0;
            setEnglish();
        } else if(jRBesp.isSelected()) {
            language=1;
            setSpanish();
        }
        setUnits();
    }//GEN-LAST:event_jRBespActionPerformed

    private void jBTResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTResetActionPerformed
    jFsettings.dispose();
        if(language==0) {
            int c=JOptionPane.showConfirmDialog(null, "Are you sure you want to restore settings to their defaults?\nAll settings will return to their original state.", "Confirmation", 0, 2);
            if (c==0) {
                JOptionPane.showMessageDialog(null, "Reverting to Defaults…", "Notice", 1);
                setDefault();
            } else {
                JOptionPane.showMessageDialog(null, "Cancelled Reversion.", "Notice", 1);
            }
        } else if(language==1) {
            int c=JOptionPane.showConfirmDialog(null, "¿Está usted seguro de que quiere restaurar los ajustes predeterminados?\nTodos los ajustes se revertirán a su estado original.", "Confirmación", 0, 2);
            if (c==0) {
                JOptionPane.showMessageDialog(null, "Revirtiendo Ajustes…", "Aviso", 1);
                setDefault();
            } else {
                JOptionPane.showMessageDialog(null, "Reversión Cancelada.", "Aviso", 1);
                
            }
        }
        jFsettings.setVisible(true);
    }//GEN-LAST:event_jBTResetActionPerformed

    private void jBTHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTHelpActionPerformed
        jFsettings.dispose();
        obj.showHelp(language);
        jFsettings.setVisible(true);
    }//GEN-LAST:event_jBTHelpActionPerformed

    private void jBTReturn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTReturn1ActionPerformed
        clearOutput1(1);
        clearOutput2(1);
        clearOutput3(1);
        jBTsimpleSave.setEnabled(false);
        
        jFsimple.dispose();
        dateAndTime.setText(obj.setTimeAndDate());
        this.setVisible(true);
    }//GEN-LAST:event_jBTReturn1ActionPerformed

    //Event Method for the calculation of BMI.
    private void jBTC1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTC1ActionPerformed
        
        try {
            
            if(dParse(jTFWeight1.getText())<=0||(dParse(jTFHeight1.getText()))<=0) {
                clearOutput1(0);
                obj.errorMessage1(language);
                return;
            }
        //Logic tree to interpret user input (based on chosen units).
        if(unit==0) {
            if(jRBKG1.isSelected()&&jRBM1.isSelected()) {
                jTFBMI1.setText(obj.calcBMI(dParse(jTFWeight1.getText()), dParse(jTFHeight1.getText()))+"");
            } else if(jRBKG1.isSelected()&&jRBCM1.isSelected()) {
                jTFBMI1.setText(obj.calcBMI(dParse(jTFWeight1.getText()), obj.antiexp2(dParse(jTFHeight1.getText())))+"");
            } else if(jRBG1.isSelected()&&jRBM1.isSelected()) {
                jTFBMI1.setText(obj.calcBMI(obj.antiexp3(dParse(jTFWeight1.getText())), dParse(jTFHeight1.getText()))+"");
            } else if(jRBG1.isSelected()&&jRBCM1.isSelected())
                jTFBMI1.setText(obj.calcBMI(obj.antiexp3(dParse(jTFWeight1.getText())), obj.antiexp2(dParse(jTFHeight1.getText())))+"");
        } else if(unit==1) {
            if(jRBKG1.isSelected()&&jRBM1.isSelected()) {
                jTFBMI1.setText(obj.calcBMI(obj.poundsToKG(dParse(jTFWeight1.getText())), obj.feetToMeters(dParse(jTFHeight1.getText())))+"");
            } else if(jRBKG1.isSelected()&&jRBCM1.isSelected()) {
                jTFBMI1.setText(obj.calcBMI(obj.poundsToKG(dParse(jTFWeight1.getText())), obj.inchesToMeters(dParse(jTFHeight1.getText())))+"");
            } else if(jRBG1.isSelected()&&jRBM1.isSelected()) {
                jTFBMI1.setText(obj.calcBMI(obj.ouncesToKG(dParse(jTFWeight1.getText())), obj.feetToMeters(dParse(jTFHeight1.getText())))+"");
            } else if(jRBG1.isSelected()&&jRBCM1.isSelected()) {
                jTFBMI1.setText(obj.calcBMI(obj.ouncesToKG(dParse(jTFWeight1.getText())), obj.inchesToMeters(dParse(jTFHeight1.getText())))+"");
            }
        }
        
        //Sets all of the required outputs based on the calculated values.
        jTFBMI1.setText(dFormat(dParse(jTFBMI1.getText())));
        double result=dParse(jTFBMI1.getText());
        jSlider1.setValue(obj.slider(result, obj.createSlider()));
        jSlider1.setToolTipText(dFormat1(result));
        
        //Displays the status and changes the color based on the calculated BMI values.
        if(result<18.5) {
            jTFBMI1.setBackground(Color.CYAN);
            jTFstatus1.setBackground(Color.CYAN);
        } else if(result>=18.5&&result<25) {
            jTFBMI1.setBackground(Color.GREEN);
            jTFstatus1.setBackground(Color.GREEN);
        } else if(result>=25&&result<30) {
            jTFBMI1.setBackground(Color.YELLOW);
            jTFstatus1.setBackground(Color.YELLOW);
        } else if(result>=30&&result<35) {
            jTFBMI1.setBackground(Color.ORANGE);
            jTFstatus1.setBackground(Color.ORANGE);
        } else if(result>=35) {
            jTFBMI1.setBackground(Color.RED);
            jTFstatus1.setBackground(Color.RED);
        }
        
        String s=obj.status(result, language);
        jTFstatus1.setText(s);
        
        //Displays all of the String output in a window.
        if(output==0) {
            obj.outputWindow(language, result, s);
        }
        
        jBTsimpleSave.setEnabled(true);
        
        }
        
        catch(Exception e) {
            clearOutput1(0);
            obj.errorMessage2(language);
        }
    }//GEN-LAST:event_jBTC1ActionPerformed

    private void jRBmetricActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBmetricActionPerformed
        if(jRBmetric.isSelected()) {
            unit=0;
            setUnits();
        } else if(jRBimperial.isSelected()) {
            unit=1;
            setUnits();
        }
    }//GEN-LAST:event_jRBmetricActionPerformed

    private void jRBimperialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBimperialActionPerformed
        if(jRBmetric.isSelected()) {
            unit=0;
            setUnits();
        } else if(jRBimperial.isSelected()) {
            unit=1;
            setUnits();
        }
    }//GEN-LAST:event_jRBimperialActionPerformed

    private void jRBdetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBdetailActionPerformed
        if(jRBdetail.isSelected()) {
            output=0;
        } else if(jRBsimple.isSelected()) {
            output=1;
        }
    }//GEN-LAST:event_jRBdetailActionPerformed

    private void jRBsimpleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBsimpleActionPerformed
        if(jRBdetail.isSelected()) {
            output=0;
        } else if(jRBsimple.isSelected()) {
            output=1;
        }
    }//GEN-LAST:event_jRBsimpleActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        clearOutput1(1);
        clearOutput2(1);
        clearOutput3(1);
        if(jTabbedPane1.getSelectedIndex()==1||jTabbedPane1.getSelectedIndex()==2) {
            jSlider1.setEnabled(false);
        } else {
            jSlider1.setEnabled(true);
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    //Event Method for the calculation of Weight based on Height and BMI.
    private void jBTC2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTC2ActionPerformed
        try {
            
            if(dParse(jTFBMI2.getText())<=0||(dParse(jTFHeight2.getText()))<=0) {
                clearOutput2(0);
                obj.errorMessage1(language);
                return;
            }
        
        if(unit==0) {
            if(jRBM2.isSelected()) {
                jTFWeight2.setText(dFormat2(obj.calcWeight(dParse(jTFBMI2.getText()), dParse(jTFHeight2.getText())))+" Kg");
                if(output==0) {
                    obj.outputWindow1(language, jTFBMI2.getText(), jTFHeight2.getText(), jTFWeight2.getText(), "m");
            }
            } else if(jRBCM2.isSelected()) {
                jTFWeight2.setText(dFormat2(obj.calcWeight(dParse(jTFBMI2.getText()), obj.antiexp2(dParse(jTFHeight2.getText()))))+" Kg");
                if(output==0) {
                    obj.outputWindow1(language, jTFBMI2.getText(), jTFHeight2.getText(), jTFWeight2.getText(), "Cm");
            }
            }
        } else if(unit==1) {
            if(jRBM2.isSelected()) {
                jTFWeight2.setText(dFormat2(obj.kgToPounds(obj.calcWeight(dParse(jTFBMI2.getText()), obj.feetToMeters(dParse(jTFHeight2.getText())))))+" lb");
                if(output==0) {
                    obj.outputWindow1(language, jTFBMI2.getText(), jTFHeight2.getText(), jTFWeight2.getText(), "ft");
            }
            } else if(jRBCM2.isSelected()) {
                jTFWeight2.setText(dFormat2(obj.kgToPounds(obj.calcWeight(dParse(jTFBMI2.getText()), obj.inchesToMeters(dParse(jTFHeight2.getText())))))+" lb");
                if(output==0) {
                    obj.outputWindow1(language, jTFBMI2.getText(), jTFHeight2.getText(), jTFWeight2.getText(), "in");
            }
            }
        }
        
        } catch(Exception e) {
            clearOutput2(0);
            obj.errorMessage2(language);
        }
    }//GEN-LAST:event_jBTC2ActionPerformed

    //Event Method for the calculation of Height based on Weight and BMI.
    private void jBTC3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTC3ActionPerformed
        try {
        
            if(dParse(jTFBMI3.getText())<=0||(dParse(jTFWeight3.getText()))<=0) {
                clearOutput2(0);
                obj.errorMessage1(language);
                return;
            }
            
        if(unit==0) {
            if(jRBKG2.isSelected()) {
                jTFHeight3.setText(dFormat2(obj.calcHeight(dParse(jTFBMI3.getText()), dParse(jTFWeight3.getText())))+" m");
                if(output==0) {
                    obj.outputWindow2(language, jTFBMI3.getText(), jTFWeight3.getText(), jTFHeight3.getText(), "Kg");
            }
            } else if(jRBG2.isSelected()) {
                jTFHeight3.setText(dFormat2(obj.calcHeight(dParse(jTFBMI3.getText()), obj.antiexp3(dParse(jTFWeight3.getText()))))+" m");
                if(output==0) {
                    obj.outputWindow2(language, jTFBMI3.getText(), jTFWeight3.getText(), jTFHeight3.getText(), "g");
            }
            }
        } else if(unit==1) {
            if(jRBKG2.isSelected()) {
                jTFHeight3.setText(dFormat2(obj.metersToFeet(obj.calcHeight(dParse(jTFBMI3.getText()), obj.poundsToKG(dParse(jTFWeight3.getText())))))+" ft");
                if(output==0) {
                    obj.outputWindow2(language, jTFBMI3.getText(), jTFWeight3.getText(), jTFHeight3.getText(), "lb");
            }
            } else if(jRBG2.isSelected()) {
                jTFHeight3.setText(dFormat2(obj.metersToFeet(obj.calcHeight(dParse(jTFBMI3.getText()), obj.ouncesToKG(dParse(jTFWeight3.getText())))))+" ft");
                if(output==0) {
                    obj.outputWindow2(language, jTFBMI3.getText(), jTFWeight3.getText(), jTFHeight3.getText(), "oz");
            }
            }
        }
        
        } catch(Exception e) {
            clearOutput3(0);
            obj.errorMessage2(language);
        }
    }//GEN-LAST:event_jBTC3ActionPerformed

    private void jTFWeight1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFWeight1KeyTyped
        jBTsimpleSave.setEnabled(false);
    }//GEN-LAST:event_jTFWeight1KeyTyped

    private void jTFHeight1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFHeight1KeyTyped
        jBTsimpleSave.setEnabled(false);
    }//GEN-LAST:event_jTFHeight1KeyTyped

    //Method used to save data into a Serialized File.
    private void jBTsimpleSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTsimpleSaveActionPerformed
        String ids="";
        int id=0;
        try {
            if(language==0) {
                ids=JOptionPane.showInputDialog(null, "Please type your ID to save.\nOnly numerical IDs are allowed.", "Save", 1);
            } else if(language==1) {
                ids=JOptionPane.showInputDialog(null, "Por favor ingrese su identificación para salvar.\nSolo se permiten identificaciónes numéricas.", "Guardar", 1);
            }
            
            if(ids==null) {
                return;
            }
            
            id=Integer.parseInt(ids);
            
            if(unit==0) {
                if(jRBKG1.isSelected()&&jRBM1.isSelected()) {
                    obj1.fillArrayList1(sP, id, dParse(dFormat2(dParse(jTFWeight1.getText()))), dParse(dFormat2(dParse(jTFHeight1.getText()))), dParse(dFormat2(dParse(jTFBMI1.getText()))));
                } else if(jRBKG1.isSelected()&&jRBCM1.isSelected()) {
                    obj1.fillArrayList1(sP, id, dParse(dFormat2(dParse(jTFWeight1.getText()))), dParse(dFormat2(obj.antiexp2(dParse(jTFHeight1.getText())))), dParse(dFormat2(dParse(jTFBMI1.getText()))));
                } else if(jRBG1.isSelected()&&jRBM1.isSelected()) {
                    obj1.fillArrayList1(sP, id, dParse(dFormat2(obj.antiexp3(dParse(jTFWeight1.getText())))), dParse(dFormat2(dParse(jTFHeight1.getText()))), dParse(dFormat2(dParse(jTFBMI1.getText()))));
                } else if(jRBG1.isSelected()&&jRBCM1.isSelected())
                    obj1.fillArrayList1(sP, id, dParse(dFormat2(obj.antiexp3(dParse(jTFWeight1.getText())))), dParse(dFormat2(obj.antiexp2(dParse(jTFHeight1.getText())))), dParse(dFormat2(dParse(jTFBMI1.getText()))));
            } else if(unit==1) {
                if(jRBKG1.isSelected()&&jRBM1.isSelected()) {
                    obj1.fillArrayList1(sP, id, dParse(dFormat2(obj.poundsToKG(dParse(jTFWeight1.getText())))), dParse(dFormat2(obj.feetToMeters(dParse(jTFHeight1.getText())))), dParse(dFormat2(dParse(jTFBMI1.getText()))));
                } else if(jRBKG1.isSelected()&&jRBCM1.isSelected()) {
                    obj1.fillArrayList1(sP, id, dParse(dFormat2(obj.poundsToKG(dParse(jTFWeight1.getText())))), dParse(dFormat2(obj.inchesToMeters(dParse(jTFHeight1.getText())))), dParse(dFormat2(dParse(jTFBMI1.getText()))));
                } else if(jRBG1.isSelected()&&jRBM1.isSelected()) {
                    obj1.fillArrayList1(sP, id, dParse(dFormat2(obj.ouncesToKG(dParse(jTFWeight1.getText())))), dParse(dFormat2(obj.feetToMeters(dParse(jTFHeight1.getText())))), dParse(dFormat2(dParse(jTFBMI1.getText()))));
                    jTFBMI1.setText(obj.calcBMI(obj.ouncesToKG(dParse(jTFWeight1.getText())), obj.feetToMeters(dParse(jTFHeight1.getText())))+"");
                } else if(jRBG1.isSelected()&&jRBCM1.isSelected()) {
                    obj1.fillArrayList1(sP, id, dParse(dFormat2(obj.ouncesToKG(dParse(jTFWeight1.getText())))), dParse(dFormat2(obj.inchesToMeters(dParse(jTFHeight1.getText())))), dParse(dFormat2(dParse(jTFBMI1.getText()))));
                }
        }
            obj1.fillFile1(sP);
            sP=obj1.readFile1(sP);
            obj.message1(language);
        } catch(Exception e) { 
            obj.errorMessage1(language);
        }
    }//GEN-LAST:event_jBTsimpleSaveActionPerformed

    //Method used to load data from a Serialized File through an ArrayList.
    private void jBTsimpleLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTsimpleLoadActionPerformed
        String ids="";
        int id=0;
        try {
            if(language==0) {
                ids=JOptionPane.showInputDialog(null, "Enter ID to search.\nOnly numerical IDs are allowed.", "Load", 1);
            } else if(language==1) {
                ids=JOptionPane.showInputDialog(null, "Por favor ingrese la identificación para la búsqueda.\nSolo se permiten identificaciónes numéricas.", "Cargar", 1);
            }
            
            if(ids==null) {
                return;
            }
            
            id=Integer.parseInt(ids);
            
            if(obj1.countResults1(sP, id)==1) {
                for(SimplePerson itrF:sP) {
                    if(itrF.getId()==id) {
                        bGWeight1.setSelected(jRBKG1.getModel(), true);
                        bGHeight1.setSelected(jRBM1.getModel(), true);
                        if(unit==0) {
                            jTFWeight1.setText(dFormat2(itrF.getWeight()));
                            jTFHeight1.setText(dFormat2(itrF.getHeight()));
                        } else if(unit==1) {
                            jTFWeight1.setText(dFormat2(obj.kgToPounds(itrF.getWeight())));
                            jTFHeight1.setText(dFormat2(obj.metersToFeet(itrF.getHeight())));
                        }
                            jTFBMI1.setText(itrF.getBMI()+"");
                            double result=dParse(jTFBMI1.getText());
                            jSlider1.setValue(obj.slider(result, obj.createSlider()));
                            jSlider1.setToolTipText(dFormat1(result));
                            
                            if(result<18.5) {
                                jTFBMI1.setBackground(Color.CYAN);
                                jTFstatus1.setBackground(Color.CYAN);
                            } else if(result>=18.5&&result<25) {
                                jTFBMI1.setBackground(Color.GREEN);
                                jTFstatus1.setBackground(Color.GREEN);
                            } else if(result>=25&&result<30) {
                                jTFBMI1.setBackground(Color.YELLOW);
                                jTFstatus1.setBackground(Color.YELLOW);
                            } else if(result>=30&&result<35) {
                                jTFBMI1.setBackground(Color.ORANGE);
                                jTFstatus1.setBackground(Color.ORANGE);
                            } else if(result>=35) {
                                jTFBMI1.setBackground(Color.RED);
                                jTFstatus1.setBackground(Color.RED);
                            }
                            String s=obj.status(result, language);
                            jTFstatus1.setText(s);
                    }
                }
            }
        JOptionPane.showMessageDialog(null, obj1.searchArray1(sP, id, language, unit));
        jTAResults.setCaretPosition(0);
        } catch(Exception e) {
            obj.errorMessage1(language);
        }
    }//GEN-LAST:event_jBTsimpleLoadActionPerformed

    private void jBTReturn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTReturn2ActionPerformed
        clearComplexOutput(1);
        jBTcomplexSave.setEnabled(false);
        jFcomplex.dispose();
        dateAndTime.setText(obj.setTimeAndDate());
        this.setVisible(true);
    }//GEN-LAST:event_jBTReturn2ActionPerformed

    //Method used to calculate the BMI based on a wider range of input parameters.
    private void jBTC4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTC4ActionPerformed
        double BMI=0; 
        String Height="", Weight="", gender="";
        int age=0;
        
        try {
            if(dParse(jTFcomplexW.getText())<=0||(dParse(jTFcomplexH.getText()))<=0) {
                clearComplexOutput(0);
                obj.errorMessage1(language);
                return;
            }
                if(unit==0) {
                    if(jRBKG3.isSelected()&&jRBM3.isSelected()) {
                        BMI=(obj.calcBMI(dParse(jTFcomplexW.getText()), dParse(jTFcomplexH.getText())));
                        Weight=dFormat2(dParse(jTFcomplexW.getText()))+" Kg";
                        Height=dFormat2(dParse(jTFcomplexH.getText()))+" m";
                    } else if(jRBKG3.isSelected()&&jRBCM3.isSelected()) {
                        BMI=(obj.calcBMI(dParse(jTFcomplexW.getText()), obj.antiexp2(dParse(jTFcomplexH.getText()))));
                        Weight=dFormat2(dParse(jTFcomplexW.getText()))+" Kg";
                        Height=dFormat2(dParse(jTFcomplexH.getText()))+" cm";
                    } else if(jRBG3.isSelected()&&jRBM3.isSelected()) {
                        BMI=(obj.calcBMI(obj.antiexp3(dParse(jTFcomplexW.getText())), dParse(jTFcomplexH.getText())));
                        Weight=dFormat2(dParse(jTFcomplexW.getText()))+" g";
                        Height=dFormat2(dParse(jTFcomplexH.getText()))+" m";
                    } else if(jRBG3.isSelected()&&jRBCM3.isSelected()) {
                        BMI=(obj.calcBMI(obj.antiexp3(dParse(jTFcomplexW.getText())), obj.antiexp2(dParse(jTFcomplexH.getText()))));
                        Weight=dFormat2(dParse(jTFcomplexW.getText()))+" g";
                        Height=dFormat2(dParse(jTFcomplexH.getText()))+" cm";
                    }
                    
                } else if(unit==1) {
                    if(jRBKG3.isSelected()&&jRBM3.isSelected()) {
                        BMI=(obj.calcBMI(obj.poundsToKG(dParse(jTFcomplexW.getText())), obj.feetToMeters(dParse(jTFcomplexH.getText()))));
                        Weight=dFormat2(dParse(jTFcomplexW.getText()))+" lb";
                        Height=dFormat2(dParse(jTFcomplexH.getText()))+" ft";
                    } else if(jRBKG3.isSelected()&&jRBCM3.isSelected()) {
                        BMI=(obj.calcBMI(obj.poundsToKG(dParse(jTFcomplexW.getText())), obj.inchesToMeters(dParse(jTFcomplexH.getText()))));
                        Weight=dFormat2(dParse(jTFcomplexW.getText()))+" lb";
                        Height=dFormat2(dParse(jTFcomplexH.getText()))+" in";
                    } else if(jRBG3.isSelected()&&jRBM3.isSelected()) {
                        BMI=(obj.calcBMI(obj.ouncesToKG(dParse(jTFcomplexW.getText())), obj.feetToMeters(dParse(jTFcomplexH.getText()))));
                        Weight=dFormat2(dParse(jTFcomplexW.getText()))+" oz";
                        Height=dFormat2(dParse(jTFcomplexH.getText()))+" ft";
                    } else if(jRBG3.isSelected()&&jRBCM3.isSelected()) {
                        BMI=(obj.calcBMI(obj.ouncesToKG(dParse(jTFcomplexW.getText())), obj.inchesToMeters(dParse(jTFcomplexH.getText()))));
                        Weight=dFormat2(dParse(jTFcomplexW.getText()))+" oz";
                        Height=dFormat2(dParse(jTFcomplexH.getText()))+" in";
                    }
                }
                
                if(!bGGender.isSelected(jRBMale.getModel())&&!bGGender.isSelected(jRBFemale.getModel())) {
                    obj.errorMessage3(language);
                    return;
                }
                
                if(jTFAge.getText().length()==0) {
                    obj.errorMessage4(language);
                    return;
                }
                
                if(Integer.parseInt(jTFAge.getText())<=0) {
                    obj.errorMessage1(language);
                    return;
                }
                
                BMI=dParse(dFormat2(BMI));
                age=Integer.parseInt(jTFAge.getText());
                
                if(bGGender.getSelection()==jRBMale.getModel()) {
                    if(language==0) {
                        gender="Male";
                    } else {
                        gender="Masculino";
                    }
                } else if(bGGender.getSelection()==jRBFemale.getModel()) {                    
                    if(language==0) {
                        gender="Female";
                    } else {
                        gender="Femenino";
                    } 
                }
                
                
                //Calls upon the complexOutput method after formatting all required fields.
                jTAResults.setText(obj.complexOuput(Weight, Height, BMI, age, gender, language));
                jTAResults.setCaretPosition(0);
                jBTcomplexSave.setEnabled(true);
                
        } catch(Exception e) {
            clearComplexOutput(0);
            obj.errorMessage2(language);
        }
    }//GEN-LAST:event_jBTC4ActionPerformed

    //Method calls upon writing methods in order to save serialized data.
    private void jBTcomplexSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTcomplexSaveActionPerformed
        String ids = "";
        int id = 0;
        try {
            if (language == 0) {
                ids = JOptionPane.showInputDialog(null, "Please type your ID to save.\nOnly numerical IDs are allowed.", "Save", 1);
            } else if (language == 1) {
                ids = JOptionPane.showInputDialog(null, "Por favor ingrese su identificación para salvar.\nSolo se permiten identificaciónes numéricas.", "Guardar", 1);
            }

            if (ids == null) {
                return;
            }

            id = Integer.parseInt(ids);
            char g=' ';
            double w=0, h=0, bmi=0;
            int a=Integer.parseInt(jTFAge.getText());
            
            if(bGGender.isSelected(jRBMale.getModel())) {
                g='m';
            } else if(bGGender.isSelected(jRBFemale.getModel())) {
                g='f';
            }
            
            //Logic tree for validating user inputs.
            if(unit==0) {
                if(jRBKG3.isSelected()&&jRBM3.isSelected()) {
                    w=dParse(dFormat2(dParse(jTFcomplexW.getText())));
                    h=dParse(dFormat2(dParse(jTFcomplexH.getText())));
                    bmi=dParse(dFormat2((obj.calcBMI(w, h))));
                } else if(jRBKG3.isSelected()&&jRBCM3.isSelected()) {
                    w=dParse(dFormat2(dParse(jTFcomplexW.getText())));
                    h=dParse(dFormat2(obj.antiexp2(dParse(jTFcomplexH.getText()))));
                    bmi=dParse(dFormat2((obj.calcBMI(w, h))));
                } else if(jRBG3.isSelected()&&jRBM3.isSelected()) {
                    w=dParse(dFormat2(obj.antiexp3(dParse(jTFcomplexW.getText()))));
                    h=dParse(dFormat2(dParse(jTFcomplexH.getText())));
                    bmi=dParse(dFormat2((obj.calcBMI(w, h))));
                } else if(jRBG3.isSelected()&&jRBCM3.isSelected()) {
                    w=dParse(dFormat2(obj.antiexp3(dParse(jTFcomplexW.getText()))));
                    h=dParse(dFormat2(obj.antiexp2(dParse(jTFcomplexH.getText()))));
                    bmi=dParse(dFormat2((obj.calcBMI(w, h))));
                }
                
            } else if(unit==1) {
                if(jRBKG3.isSelected()&&jRBM3.isSelected()) {
                    w=dParse(dFormat2(obj.poundsToKG(dParse(jTFcomplexW.getText()))));
                    h=dParse(dFormat2(obj.feetToMeters(dParse(jTFcomplexH.getText()))));
                    bmi=dParse(dFormat2((obj.calcBMI(w, h))));
                } else if(jRBKG3.isSelected()&&jRBCM3.isSelected()) {
                    w=dParse(dFormat2(obj.poundsToKG(dParse(jTFcomplexW.getText()))));
                    h=dParse(dFormat2(obj.inchesToMeters(dParse(jTFcomplexH.getText()))));
                    bmi=dParse(dFormat2((obj.calcBMI(w, h))));
                } else if(jRBG3.isSelected()&&jRBM3.isSelected()) {
                    w=dParse(dFormat2(obj.ouncesToKG(dParse(jTFcomplexW.getText()))));
                    h=dParse(dFormat2(obj.feetToMeters(dParse(jTFcomplexH.getText()))));
                    bmi=dParse(dFormat2((obj.calcBMI(w, h))));
                } else if(jRBG3.isSelected()&&jRBCM3.isSelected()) {
                    w=dParse(dFormat2(obj.ouncesToKG(dParse(jTFcomplexW.getText()))));
                    h=dParse(dFormat2(obj.inchesToMeters(dParse(jTFcomplexH.getText()))));
                    bmi=dParse(dFormat2((obj.calcBMI(w, h))));
                }
            }
            
            obj1.fillArrayList2(cP, id, w, h, bmi, a, g);
            
            obj1.fillFile2(cP);
            cP=obj1.readFile2(cP);
            obj.message1(language);
            
        } catch(Exception e) {
            obj.errorMessage1(language);
        }
    }//GEN-LAST:event_jBTcomplexSaveActionPerformed

    //Method used to load objects into the Text Area within the frame. This calls upon the searchArray method based on user input.
    private void jBTcomplexLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTcomplexLoadActionPerformed
        String ids="";
        int id=0;
        try {
            if(language==0) {
                ids=JOptionPane.showInputDialog(null, "Enter ID to search.\nOnly numerical IDs are allowed.", "Load", 1);
            } else if(language==1) {
                ids=JOptionPane.showInputDialog(null, "Por favor ingrese la identificación para la búsqueda.\nSolo se permiten identificaciónes numéricas.", "Cargar", 1);
            }
            
            if(ids==null) {
                return;
            }
            
            id=Integer.parseInt(ids);
            
            if(obj1.countResults2(cP, id)==1) {
                for(ComplexPerson itrF:cP) {
                    if(itrF.getId()==id) {
                        bGWeight3.setSelected(jRBKG3.getModel(), true);
                        bGHeight3.setSelected(jRBM3.getModel(), true);
                        
                        if(unit==0) {
                            jTFcomplexW.setText(dFormat2(itrF.getWeight()));
                            jTFcomplexH.setText(dFormat2(itrF.getHeight()));
                        } else if(unit==1) {
                            jTFcomplexW.setText(dFormat2(obj.kgToPounds(itrF.getWeight())));
                            jTFcomplexH.setText(dFormat2(obj.metersToFeet(itrF.getHeight())));
                        }
                        
                        if(itrF.getGender()=='m') {
                            bGGender.setSelected(jRBMale.getModel(), true);
                        } else if(itrF.getGender()=='f') {
                            bGGender.setSelected(jRBFemale.getModel(), true);
                        }
                        
                        jTFAge.setText(itrF.getAge()+"");
                    }
                }
            } 
            
            jTAResults.setText(obj1.searchArray2(cP, id, language, unit));
            
        } catch(Exception e) {
            
        }
    }//GEN-LAST:event_jBTcomplexLoadActionPerformed

    private void jTFcomplexWKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFcomplexWKeyTyped
        jBTcomplexSave.setEnabled(false);
    }//GEN-LAST:event_jTFcomplexWKeyTyped

    private void jTFcomplexHKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFcomplexHKeyTyped
        jBTcomplexSave.setEnabled(false);
    }//GEN-LAST:event_jTFcomplexHKeyTyped

    private void jTFAgeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFAgeKeyTyped
        jBTcomplexSave.setEnabled(false);
    }//GEN-LAST:event_jTFAgeKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bGGender;
    private javax.swing.ButtonGroup bGHeight1;
    private javax.swing.ButtonGroup bGHeight2;
    private javax.swing.ButtonGroup bGHeight3;
    private javax.swing.ButtonGroup bGLanguage;
    private javax.swing.ButtonGroup bGOutput;
    private javax.swing.ButtonGroup bGUnit;
    private javax.swing.ButtonGroup bGWeight1;
    private javax.swing.ButtonGroup bGWeight2;
    private javax.swing.ButtonGroup bGWeight3;
    private javax.swing.JLabel dateAndTime;
    private javax.swing.JButton jBTC1;
    private javax.swing.JButton jBTC2;
    private javax.swing.JButton jBTC3;
    private javax.swing.JButton jBTC4;
    private javax.swing.JButton jBTComplex;
    private javax.swing.JButton jBTExit;
    private javax.swing.JButton jBTHelp;
    private javax.swing.JButton jBTReset;
    private javax.swing.JButton jBTReturn;
    private javax.swing.JButton jBTReturn1;
    private javax.swing.JButton jBTReturn2;
    private javax.swing.JButton jBTSettings;
    private javax.swing.JButton jBTSimple;
    private javax.swing.JButton jBTcomplexLoad;
    private javax.swing.JButton jBTcomplexSave;
    private javax.swing.JButton jBTsimpleLoad;
    private javax.swing.JButton jBTsimpleSave;
    private javax.swing.JFrame jFcomplex;
    private javax.swing.JFrame jFsettings;
    private javax.swing.JFrame jFsimple;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelAge;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRBCM1;
    private javax.swing.JRadioButton jRBCM2;
    private javax.swing.JRadioButton jRBCM3;
    private javax.swing.JRadioButton jRBFemale;
    private javax.swing.JRadioButton jRBG1;
    private javax.swing.JRadioButton jRBG2;
    private javax.swing.JRadioButton jRBG3;
    private javax.swing.JRadioButton jRBKG1;
    private javax.swing.JRadioButton jRBKG2;
    private javax.swing.JRadioButton jRBKG3;
    private javax.swing.JRadioButton jRBM1;
    private javax.swing.JRadioButton jRBM2;
    private javax.swing.JRadioButton jRBM3;
    private javax.swing.JRadioButton jRBMale;
    private javax.swing.JRadioButton jRBdetail;
    private javax.swing.JRadioButton jRBeng;
    private javax.swing.JRadioButton jRBesp;
    private javax.swing.JRadioButton jRBimperial;
    private javax.swing.JRadioButton jRBmetric;
    private javax.swing.JRadioButton jRBsimple;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextArea jTAResults;
    private javax.swing.JTextField jTFAge;
    private javax.swing.JTextField jTFBMI1;
    private javax.swing.JTextField jTFBMI2;
    private javax.swing.JTextField jTFBMI3;
    private javax.swing.JTextField jTFHeight1;
    private javax.swing.JTextField jTFHeight2;
    private javax.swing.JTextField jTFHeight3;
    private javax.swing.JTextField jTFWeight1;
    private javax.swing.JTextField jTFWeight2;
    private javax.swing.JTextField jTFWeight3;
    private javax.swing.JTextField jTFcomplexH;
    private javax.swing.JTextField jTFcomplexW;
    private javax.swing.JTextField jTFstatus1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel jimage;
    // End of variables declaration//GEN-END:variables

//Method used by language settings to change all language to Spanish.
public void setSpanish() {
    this.setTitle("Menú Principal");
    jFsettings.setTitle("Ajustes");
    jFsimple.setTitle("Cálculo Simple");
    jFcomplex.setTitle("Cálculo Complejo");
            
    jBTExit.setText("Salir");
    jBTExit.setToolTipText("Cerrar Aplicación");
    jBTHelp.setToolTipText("Ayuda");
    jBTReturn.setText("Volver");
    jBTReset.setText("Restaurar");
            
    jLabel1.setText("Calculadora de IMC");
    jLabel2.setText("Ajustes de Accesibilidad");
    jLabel3.setText("Ajustes de Lenguaje");  
    jLabel4.setText("<html>Ajustes de Resultados<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Cálculo Simple)&nbsp;<html>");
    jLabel5.setText("Ajustes de Unidades");
    jLabel6.setText("IMC");
    jLabel7.setText("IMC");
            
    jBTSimple.setText("Cálculo de IMC Simple");
    jBTComplex.setText("Cálculo de IMC Complejo");
    jBTSettings.setText("Ajustes de Accesibilidad");
    jRBdetail.setText("Detallado");
    jRBsimple.setText("Sencillo");
    jRBmetric.setText("Métrico");
    
    jTabbedPane1.setTitleAt(0, "IMC");
    jTabbedPane1.setTitleAt(1, "Peso");
    jTabbedPane1.setTitleAt(2, "Altura");
    jBTReturn1.setText("Volver");
    jBTC1.setText("Calcular");
    jBTC2.setText("Calcular");
    jBTC3.setText("Calcular");
    jBTsimpleSave.setText("Guardar");
    jBTsimpleLoad.setText("Cargar");
    jBTcomplexSave.setText("Guardar");
    jBTcomplexLoad.setText("Cargar");
    
    jRBKG1.setText("Kilogramos");
    jRBG1.setText("Gramos");
    jRBM1.setText("Metros");
    jRBCM1.setText("Centímetros");
    
    jLabelAge.setText("Edad:");
    jRBMale.setText("Masculino");
    jRBFemale.setText("Femenino");
    jBTC4.setText("Calcular");
    jBTReturn2.setText("Volver");
    
    obj.jOptionPaneLang(language);
}

//Method used by language settings to change all language to English.
public void setEnglish() {
    this.setTitle("Main Menu");
    jFsettings.setTitle("Settings");
    jFsimple.setTitle("Simple Calculation");
    jFcomplex.setTitle("Complex Calculation");
            
    jBTExit.setText("Exit");
    jBTExit.setToolTipText("Close Application");
    jBTHelp.setToolTipText("Help");
    jBTReturn.setText("Return");
    jBTReset.setText("Reset");
            
    jLabel1.setText("BMI Calculator");
    jLabel2.setText("Accessibility Settings");
    jLabel3.setText("Language Settings");
    jLabel4.setText("<html>&nbsp;&nbsp;&nbsp;Output Settings<br>&nbsp;(Simple BMI Calc.)&nbsp;<html>");
    jLabel5.setText("Unit Settings");
    jLabel6.setText("BMI");
    jLabel7.setText("BMI");
            
    jBTSimple.setText("Simple BMI Calculation");
    jBTComplex.setText("Complex BMI Calculation");
    jBTSettings.setText("Accessibility Settings");
    jRBdetail.setText("Detailed");
    jRBsimple.setText("Simple");
    jRBmetric.setText("Metric");
    
    jTabbedPane1.setTitleAt(0, "BMI");
    jTabbedPane1.setTitleAt(1, "Weight");
    jTabbedPane1.setTitleAt(2, "Height");
    jBTReturn1.setText("Return");
    jBTC1.setText("Calculate");
    jBTC2.setText("Calculate");
    jBTC3.setText("Calculate");
    jBTsimpleSave.setText("Save");
    jBTsimpleLoad.setText("Load");
    jBTcomplexSave.setText("Save");
    jBTcomplexLoad.setText("Load");
    
    jRBKG1.setText("Kilograms");
    jRBG1.setText("Grams");
    jRBM1.setText("Meters");
    jRBCM1.setText("Centimeters");
    
    jLabelAge.setText("Age:");
    jRBMale.setText("Male");
    jRBFemale.setText("Female");
    jBTC4.setText("Calculate");
    jBTReturn2.setText("Return");
    
    obj.jOptionPaneLang(language);    
}

//Method used to revert all settings to their defaults.
public void setDefault() {
    bGLanguage.setSelected(jRBeng.getModel(), true);
    setEnglish();
    language=0;
    obj.jOptionPaneLang(language);
                
    bGOutput.setSelected(jRBdetail.getModel(), true);
    output=0;
    
    bGUnit.setSelected(jRBmetric.getModel(), true);
    unit=0;
    setUnits();
    
    bGWeight1.setSelected(jRBKG1.getModel(), true);
    bGHeight1.setSelected(jRBM1.getModel(), true);
    bGWeight2.setSelected(jRBKG2.getModel(), true);
    bGHeight2.setSelected(jRBM2.getModel(), true);
    bGWeight3.setSelected(jRBKG3.getModel(), true);
    bGHeight3.setSelected(jRBM3.getModel(), true);
}

//Methods used to clear all outputs in specific windows.
public void clearOutput1(int c) {
    if(c==1) {
    jTFWeight1.setText("");
    jTFHeight1.setText("");
    }
    jTFBMI1.setText("");
    jTFBMI1.setBackground(null);
    jTFstatus1.setText("");
    jTFstatus1.setBackground(null);
    jSlider1.setValue(50);
    jSlider1.setToolTipText(null);
}

public void clearOutput2(int c) {
    if(c==1) {
    jTFBMI2.setText("");
    jTFHeight2.setText("");
    }
    jTFWeight2.setText("");
}

public void clearOutput3(int c) {
    if(c==1) {
    jTFBMI3.setText("");
    jTFWeight3.setText("");
    }
    jTFHeight3.setText("");
}

public void clearComplexOutput(int c) {
    if(c==1) {
        jTFcomplexW.setText("");
        jTFcomplexH.setText("");
        jTFAge.setText("");
        bGGender.clearSelection();
    }
    jTAResults.setText("");
}

//Sets all units and their in the respective system and language.
public void setUnits() {
    if(unit==0) {
        if(language==0) {
            jRBKG1.setText("Kilograms");
            jRBG1.setText("Grams");
            jRBM1.setText("Meters");
            jRBCM1.setText("Centimeters");
            jRBM2.setText("Meters");
            jRBCM2.setText("Centimeters");
            jRBKG2.setText("Kilograms");
            jRBG2.setText("Grams");
            jRBKG3.setText("Kilograms");
            jRBG3.setText("Grams");
            jRBM3.setText("Meters");
            jRBCM3.setText("Centimeters");
        } else if(language==1) {
            jRBKG1.setText("Kilogramos");
            jRBG1.setText("Gramos");
            jRBM1.setText("Metros");
            jRBCM1.setText("Centímetros");
            jRBM2.setText("Metros");
            jRBCM2.setText("Centímetros");
            jRBKG2.setText("Kilogramos");
            jRBG2.setText("Gramos");
            jRBKG3.setText("Kilogramos");
            jRBG3.setText("Gramos");
            jRBM3.setText("Metros");
            jRBCM3.setText("Centímetros");
        }
    } else if(unit==1) {
        if(language==0) {
            jRBKG1.setText("Pounds");
            jRBG1.setText("Ounces");
            jRBM1.setText("Feet");
            jRBCM1.setText("Inches");
            jRBM2.setText("Feet");
            jRBCM2.setText("Inches");
            jRBKG2.setText("Pounds");
            jRBG2.setText("Ounces");
            jRBKG3.setText("Pounds");
            jRBG3.setText("Ounces");
            jRBM3.setText("Feet");
            jRBCM3.setText("Inches");
    } else if(language==1) {
            jRBKG1.setText("Libras");
            jRBG1.setText("Onzas");
            jRBM1.setText("Pies");
            jRBCM1.setText("Pulgadas");
            jRBM2.setText("Pies");
            jRBCM2.setText("Pulgadas");
            jRBKG2.setText("Libras");
            jRBG2.setText("Onzas");
            jRBKG3.setText("Libras");
            jRBG3.setText("Onzas");
            jRBM3.setText("Pies");
            jRBCM3.setText("Pulgadas");
    }
}
    
}

//Shortened double parse method.
public double dParse(String x) {
    return Double.parseDouble(x);
}

//Methods that format double type variables into the globally-declared decimal formats.
public String dFormat(double x) {
    return df.format(x);
}

public String dFormat1(double x) {
    return df1.format(x);
}

public String dFormat2(double x) {
    return df2.format(x);
}

}